
@implements IDisposable

<h3>CityListComponent</h3>

@if (_cities is not null)
{
    <div class="container-fluid text-center">
        <div class="row w-50">
            @foreach (var item in _cities)
            {
                <CityComponent city="@item"
                               SelectCityCallback="HandleCitySelection"
                               selectedCity="@selectedCity"></CityComponent>
            }
        </div>
    </div>
}


@code {

    private string selectedCity = "Toronto";
    private List<string?> _cities { get; set; } 

    [Parameter] public EventCallback<string> SelectCityCallback { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityListComponent: {nameof(OnInitialized)}: {guid}");
        _cities ??= ServersRepository.GetServres().Select(s => s.City).Distinct().ToList();
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityListComponent: {nameof(OnParametersSet)}: {guid}");
    }

    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityListComponent: {nameof(ShouldRender)}: {guid}");
        return base.ShouldRender();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityListComponent: {nameof(OnAfterRender)}: {guid}");
    }


    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        SelectCityCallback.InvokeAsync(cityName);
    }

    public void Dispose()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityListComponent: {nameof(Dispose)}: {guid}");
    }

    public void ClrListComponent()
    {
        selectedCity = string.Empty;
    }

}
